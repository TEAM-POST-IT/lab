/*
 * This file is generated by jOOQ.
 */
package com.example.distributedlockredisson.jooq.tables.records


import com.example.distributedlockredisson.jooq.tables.Storages

import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StoragesRecord() : UpdatableRecordImpl<StoragesRecord>(Storages.STORAGES) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var parentStorageId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var extType: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var storageName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var storageFileSize: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised StoragesRecord
     */
    constructor(id: Long? = null, parentStorageId: Long? = null, extType: String? = null, storageName: String? = null, storageFileSize: Long? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.parentStorageId = parentStorageId
        this.extType = extType
        this.storageName = storageName
        this.storageFileSize = storageFileSize
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
